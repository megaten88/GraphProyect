/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto3;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.graphstream.algorithm.Dijkstra;
import org.graphstream.graph.Edge;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.MultiGraph;
import org.graphstream.stream.ProxyPipe;
import org.graphstream.ui.graphicGraph.GraphicElement;
import org.graphstream.ui.graphicGraph.GraphicGraph;
import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.View;
import org.graphstream.ui.view.Viewer;

/**
 *
 * @author mayra
 */
public class GraphMapping extends javax.swing.JFrame {

    private MultiGraph graph;
    private Node nodea = null;
    private Node nodeb = null;
    private Viewer viewer = null;
    private GraphicGraph ggraph;
    private ViewPanel view = null;
    private ArrayList<Node> shortestDistance;
    private ArrayList<Node> cheapestRoute;

    /**
     * Creates new form GraphMapping
     */
    public GraphMapping() {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setTitle("Cities Graph");
        initComponents();
        System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
        this.graph = readFile(new File("./cities.txt"));
        viewer = new Viewer(graph,
                Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
        view = viewer.addDefaultView(true);
        viewer.enableAutoLayout();

        ProxyPipe viewerPipe = viewer.newViewerPipe();
        viewerPipe.addAttributeSink(graph);

        view.getCamera().setAutoFitView(true);
        view.getCamera().setViewCenter(0.5, 0.5, 0);
        view.getCamera().setViewPercent(0.3);
        view.setSize(new Dimension(1100, 800));
        this.add((Component) view, BorderLayout.SOUTH);
        view.openInAFrame(false);
        view.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectNodes(evt);
            }
        });
        shortestDistance = new ArrayList();
        cheapestRoute = new ArrayList();
        ggraph = this.viewer.getGraphicGraph();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        distanceB = new javax.swing.JButton();
        costC = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        distanceB.setBackground(new java.awt.Color(73, 225, 207));
        distanceB.setText("Ciudad a Ciudad Distancia");
        distanceB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceBActionPerformed(evt);
            }
        });

        costC.setBackground(new java.awt.Color(134, 246, 248));
        costC.setText("Ciudad a Ciudad Costo");
        costC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                costCMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(685, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(distanceB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(costC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(distanceB, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(costC, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(312, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void distanceBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceBActionPerformed
        if (this.nodea != null && this.nodeb != null) {
            String path = "El recorrido realizado fue:\n";
            Double distance = 0.0;
            Dijkstra dijkstra = new Dijkstra(Dijkstra.Element.EDGE, null, "distance");
            dijkstra.init(graph);
            dijkstra.setSource(graph.getNode(nodea.getId()));
            dijkstra.compute();
            for (Node node : dijkstra.getPathNodes(graph.getNode(nodeb.getId()))) {
                this.ggraph.getNode(node.getId()).addAttribute("ui.selected");
                this.shortestDistance.add(node);
            }
            for (Edge edge : dijkstra.getPathEdges(graph.getNode(nodeb.getId()))) {
                this.ggraph.getEdge(edge.getId()).addAttribute("ui.style", "fill-mode:gradient-horizontal;fill-color:#DE6262,#FFB88C;");
                this.ggraph.getEdge(edge.getId()).addAttribute("ui.label", Double.toString(edge.getAttribute("distance")) + "km");
                distance += (double) edge.getAttribute("distance");
            }
            for (int i = shortestDistance.size() - 1; i >= 0; i--) {
                if (i == 0) {
                    path += this.shortestDistance.get(i).getId() + ".\n";
                } else {
                    path += this.shortestDistance.get(i).getId() + "--->";
                }
            }
            if (this.shortestDistance.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No existen rutas para las ciudades seleccionadas.", "Resultado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "----Resultado---\n" + path + "La distancia recorrida es: " + distance + "km", "Resultado", JOptionPane.INFORMATION_MESSAGE);
            }
            this.nodea = null;
            this.nodeb = null;
            this.shortestDistance = new ArrayList();

        } else {
            JOptionPane.showMessageDialog(this, "No hay nodos seleccionados.", "Error", JOptionPane.ERROR_MESSAGE);
            for (Node node : graph) {
                if (ggraph.getNode(node.getId()).hasAttribute("ui.selected")) {
                    ggraph.getNode(node.getId()).removeAttribute("ui.selected");
                }
            }
            for (Edge edge : graph.getEachEdge()) {
                ggraph.getEdge(edge.getId()).removeAttribute("ui.label");
                ggraph.getEdge(edge.getId()).removeAttribute("ui.style");
                ggraph.getEdge(edge.getId()).addAttribute("ui.style", ""
                        + "	size: 5px;\n"
                        + "	shape:angle;\n"
                        + "	arrow-shape:arrow;\n"
                        + "	arrow-size:5px,5px;\n"
                        + "	padding: 20px;\n"
                        + "	fill-mode:gradient-horizontal;\n"
                        + "	fill-color:#ff0084,#480048;\n"
                        + "     text-color:white;\n"
                        + "	text-background-mode:rounded-box;\n"
                        + "	text-background-color: #A7CC;\n"
                        + "	text-style:bold-italic;\n"
                        + "	text-alignment:under; ");
            }
        }
    }//GEN-LAST:event_distanceBActionPerformed

    private void costCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_costCMouseClicked
        if (this.nodea != null && this.nodeb != null) {
            String path = "";
            Double cost = 0.0;
            Dijkstra dijkstra = new Dijkstra(Dijkstra.Element.EDGE, null, "cost");
            dijkstra.init(graph);
            dijkstra.setSource(graph.getNode(nodea.getId()));
            dijkstra.compute();
            for (Node node : dijkstra.getPathNodes(graph.getNode(nodeb.getId()))) {
                this.ggraph.getNode(node.getId()).addAttribute("ui.selected");
                this.cheapestRoute.add(node);
            }
            for (Edge edge : dijkstra.getPathEdges(graph.getNode(nodeb.getId()))) {
                this.ggraph.getEdge(edge.getId()).addAttribute("ui.style", "fill-mode:gradient-horizontal;fill-color:#DE6262,#FFB88C;");
                this.ggraph.getEdge(edge.getId()).addAttribute("ui.label", "$" + Double.toString(edge.getAttribute("cost")));
                cost += (double) edge.getAttribute("cost");
            }
            for (int i = this.cheapestRoute.size() - 1; i >= 0; i--) {
                if (i == 0) {
                    path += this.cheapestRoute.get(i).getId() + ".\n";
                } else {
                    path += this.cheapestRoute.get(i).getId() + "--->";
                }
            }
            if (this.cheapestRoute.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No existen rutas para las ciudades seleccionadas.", "Resultado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "----Resultado---\n" + path + "La distancia recorrida es: $" + cost, "Resultado", JOptionPane.INFORMATION_MESSAGE);
            }
            this.nodea = null;
            this.nodeb = null;
            this.cheapestRoute = new ArrayList();
        } else {
            JOptionPane.showMessageDialog(this, "No hay nodos seleccionados.", "Error", JOptionPane.ERROR_MESSAGE);
            for (Node node : graph) {
                if (ggraph.getNode(node.getId()).hasAttribute("ui.selected")) {
                    ggraph.getNode(node.getId()).removeAttribute("ui.selected");
                }
            }
            for (Edge edge : graph.getEachEdge()) {
                ggraph.getEdge(edge.getId()).removeAttribute("ui.label");
                ggraph.getEdge(edge.getId()).removeAttribute("ui.style");
                ggraph.getEdge(edge.getId()).addAttribute("ui.style", ""
                        + "	size: 5px;\n"
                        + "	shape:angle;\n"
                        + "	arrow-shape:arrow;\n"
                        + "	arrow-size:5px,5px;\n"
                        + "	padding: 20px;\n"
                        + "	fill-mode:gradient-horizontal;\n"
                        + "	fill-color:#ff0084,#480048;\n"
                        + "     text-color:white;\n"
                        + "	text-background-mode:rounded-box;\n"
                        + "	text-background-color: #A7CC;\n"
                        + "	text-style:bold-italic;\n"
                        + "	text-alignment:under; ");
            }
        }
    }//GEN-LAST:event_costCMouseClicked
    private void selectNodes(MouseEvent evt) {
        if (evt.isMetaDown()) {
            int nodeselect = 0;
            for (Node node : graph) {
                if (ggraph.getNode(node.getId()).hasAttribute("ui.selected")) {
                    if (this.nodea == null) {
                        this.nodea = ggraph.getNode(node.getId());
                    } else if (this.nodeb == null && ggraph.getNode(node.getId()) != this.nodea) {
                        this.nodeb = viewer.getGraphicGraph().getNode(node.getId());
                    } else {
                        if (this.nodea != null && this.nodeb != null && nodeselect >= 2) {
                            JOptionPane.showMessageDialog(this, "Ya eligió dos ciudades, se reiniciarán las selecciones");
                            for (Node nodei : graph) {
                                this.ggraph.getNode(nodei.getId()).removeAttribute("ui.selected");
                            }
                            for (Edge edge : graph.getEachEdge()) {
                                ggraph.getEdge(edge.getId()).removeAttribute("ui.style");
                                ggraph.getEdge(edge.getId()).removeAttribute("ui.label");
                                ggraph.getEdge(edge.getId()).addAttribute("ui.style", ""
                                        + "	size: 5px;\n"
                                        + "	shape:angle;\n"
                                        + "	arrow-shape:arrow;\n"
                                        + "	arrow-size:5px,5px;\n"
                                        + "	padding: 20px;\n"
                                        + "	fill-mode:gradient-horizontal;\n"
                                        + "	fill-color:#ff0084,#480048;\n"
                                        + "     text-color:white;\n"
                                        + "	text-background-mode:rounded-box;\n"
                                        + "	text-background-color: #A7CC;\n"
                                        + "	text-style:bold-italic;\n"
                                        + "	text-alignment:under; ");
                            }
                            nodeselect = 0;
                            this.nodea = null;
                            this.nodeb = null;
                        }
                    }
                    nodeselect++;
                }
            }
        } else {
            for (Node node : graph) {
                this.ggraph.getNode(node.getId()).removeAttribute("ui.selected");
            }
            for (Edge edge : graph.getEachEdge()) {
                ggraph.getEdge(edge.getId()).removeAttribute("ui.style");
                ggraph.getEdge(edge.getId()).removeAttribute("ui.label");
                ggraph.getEdge(edge.getId()).addAttribute("ui.style", ""
                        + "	size: 5px;\n"
                        + "	shape:angle;\n"
                        + "	arrow-shape:arrow;\n"
                        + "	arrow-size:5px,5px;\n"
                        + "	padding: 20px;\n"
                        + "	fill-mode:gradient-horizontal;\n"
                        + "	fill-color:#ff0084,#480048;\n"
                        + "     text-color:white;\n"
                        + "	text-background-mode:rounded-box;\n"
                        + "	text-background-color: #A7CC;\n"
                        + "	text-style:bold-italic;\n"
                        + "	text-alignment:under; ");
            }
            this.nodea = null;
            this.nodeb = null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphMapping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphMapping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphMapping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphMapping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphMapping().setVisible(true);
            }
        });
    }

    public static MultiGraph readFile(File file) {
        MultiGraph graph = new MultiGraph("Mapa");
        //Set Strict hace que el grafo cree edges y nodos sin tener que hacer validaciones sobre si ya existen
        graph.setStrict(false);
        String css = returnCSS(new File("./graph.css"));
        graph.addAttribute("ui.stylesheet", css);
        graph.addAttribute("ui.quality");
        graph.addAttribute("ui.antialias");
        ArrayList<Flight> flights = new ArrayList();
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line = "";
            Flight flight = null;
            while ((line = br.readLine()) != null) {
                try {
                    Scanner read = new Scanner(line);
                    read.useDelimiter("[,]");
                    int i = 0;
                    while (read.hasNext()) {
                        flight = new Flight(read.next(), read.next(), read.next(), Double.parseDouble(read.next()), Double.parseDouble(read.next()));
                        if (flight != null) {
                            flights.add(flight);
                        }
                    }
                    read.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            br.close();
            fr.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(flights.size());
        for (int i = 0; i < flights.size(); i++) {
            graph.addNode(flights.get(i).getCity1());
            graph.addNode(flights.get(i).getCity2());
            String edge = flights.get(i).getCity1() + "-" + flights.get(i).getCity2();
            graph.addEdge(edge, flights.get(i).getCity1(), flights.get(i).getCity2(), true);
            graph.getEdge(edge).addAttribute("distance", flights.get(i).getDistance());
            graph.getEdge(edge).addAttribute("cost", flights.get(i).getCost());
        }
        int i = 1;
        for (Node node : graph) {
            node.addAttribute("ui.label", node.getId());
        }
        return graph;
    }

    //método que lee el archivo de css para el grafo
    public static String returnCSS(File file) {
        String css = "";
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line = "";
            while ((line = br.readLine()) != null) {
                css += line;
            }
            br.close();
            fr.close();
        } catch (Exception e) {
            e.printStackTrace();

        }
        return css;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton costC;
    private javax.swing.JButton distanceB;
    // End of variables declaration//GEN-END:variables
}
